pro_submit --- result

0 -- in queue
1 -- Accepted
2 -- Presentation Error
3 -- Output Limit
4 -- Runtime Error
5 -- Memory Limit Exceeded
6 -- Time Limit Exceeded
7 -- Wrong Answer
8 -- Compile error
9 -- running
-1 -- hucked

in contest add
11 -- Passed pretests

YXXX --- Y on test XXX
(Y is 2-8)

-2 is sever have some error , please call admit
admit maybe can't solve it, don't call thank!


huck_submit --- result

0 -- in queue
1 -- Successful hacking attempt
2 -- Unsuccessful hacking attempt
3 -- Illegal data
4 -- hacking attempt( legal data , running )


pro_language --- select
1 --- gcc
2 --- g++
3 --- g++11
4 --- g++14
5 --- java

contest level --- select
0 --- div3(Rating on (-inf,1200) )
1 --- div2(Rating on [1200,1900) )
2 --- div1'2(Rating on (-inf,inf) )
3 --- div1(Rating on [1900,inf) )
4 --- education (using CCPC/ICPC)

Types of contest --- select
1 --- CF rating div
2 --- ICPC/CCPC

contest rule
div记分规则为：
题目满分为250分的倍数 ，假定倍数为y （0 < y < 15）
其中提交x发但是没有通过 在本题通过以后将本题获得的分数 - 50*x分（其中失败提交应该为Accepted之前的所有失败提交记录）
其中compile error和* error on test 1是不会被记录为失败提交
当本题通过时， 将获得本题满分 - 最后一次通过的时间(套题已经过了多少分钟) * y
在本题锁题以后可以查看他人的代码，查看后将允许hack他人的代码
hack成功将获得100分
hack失败将-50分
最后一次AC被hack则记为提交失败，前置AC的提交记录不能被hack,也不成为通过本题的依据
保证通过一道题后保底获得本题满分*30%的分数

测试题目的样例分成三个部分（由于目前还在测试与Debug，测试人员少，决定让管理员允许hack测试人员数据，作为测试）
1. 线上样例，生成一小部分测试用例用来评测代码是否具有通用性即可，数据基本不包含TE，并且数据较水，测试结束后样例被删除（或保留，但是不会作为原测试样例测试）
2. hack样例，hack样例由场上玩家提供（管理员与无关人员不应该hack，特殊调试情况允许管理员进行hack，但是管理员的hack样例应该对所有代码进行hack,而不能只hack个别参赛选手），比赛结束后hack数据将加入到原测试样例
3. 原测试（线下）样例，原本对本题的严格数据，应该包含本题完整的数据，控制复杂度与所有特殊情况，测试结束后样例保留，并且作为公开题目以后的测试数据

关于排名即使获取与更新的步骤与想法实现（评测机+数据库+html的交互）
1.参赛选手提交评测数据进入评测机(锁题后由前台静止提交，后台不再做锁题提交的判断，认为所有提交到后台的数据都是合法数据，按照合法操作执行 )
2.进入评测队列
3.评测机返回评测结果，更新，如果获得AC将这条数据插入到contest_ranks_information_1中，记录AC的题目和对应时间，分数，其中保证每个用户每一道题只有一条记录
4.评测机更新个人得分记录在contest_ranks_information_2中
5.html从contest_ranks_information_2中拉取排名信息，并且从contest_ranks_information_1中拉取数据展示整个rank页面